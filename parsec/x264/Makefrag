OBJDIRS += parsec/x264 parsec/x264/common parsec/x264/encoder

X264_SRCS = common/mc.c common/predict.c common/pixel.c common/macroblock.c \
	common/frame.c common/dct.c common/cpu.c common/cabac.c \
	common/common.c common/mdate.c common/set.c \
	common/quant.c common/vlc.c \
	encoder/analyse.c encoder/me.c encoder/ratecontrol.c \
	encoder/set.c encoder/macroblock.c encoder/cabac.c \
	encoder/cavlc.c encoder/encoder.c \
	extras/getopt.c
X264_SRCS += common/x86/mc-c.c common/x86/predict-c.c
X264_SRCS += x264.c matroska.c muxers.c
X264_SRCS := $(addprefix parsec/x264/,$(X264_SRCS))

X264_ASMS = cabac-a.asm dct-a.asm deblock-a.asm mc-a.asm mc-a2.asm \
	pixel-a.asm predict-a.asm quant-a.asm sad-a.asm \
	cpu-a.asm dct-32.asm pixel-32.asm
X264_ASMS := $(addprefix parsec/x264/common/x86/,$(X264_ASMS))

X264_OBJS :=	$(patsubst %.c,$(OBJDIR)/%.o,$(X264_SRCS)) \
		$(patsubst %.asm,$(OBJDIR)/%.o,$(X264_ASMS))

X264_CFLAGS := $(filter-out -Wall -Werror,$(USER_CFLAGS)) \
	-DHAVE_STDINT_H -DHAVE_MMX -DHAVE_PTHREAD -DPIOS_DSCHED \
	-Iparsec/x264 -Iparsec/x264/extras \
	-fno-strict-aliasing

# XXX don't compile x264 if yasm isn't available
X264_YASM = yasm
X264_ASFLAGS := -O2 -f elf -Icommon/x86/

$(OBJDIR)/parsec/x264/%.o: parsec/x264/%.c
	@echo + cc[USER] $<
	@mkdir -p $(@D)
	$(V)$(CC) $(X264_CFLAGS) -c -o $@ $<

$(OBJDIR)/parsec/x264/%.o: parsec/x264/%.asm
	@echo + as[USER] $<
	@mkdir -p $(@D)
	$(V)$(X264_YASM) $(X264_ASFLAGS) -o $@ $<

$(OBJDIR)/user/x264: $(X264_OBJS) $(USER_LDDEPS)
	@echo + ld $@
	$(V)$(LD) -o $@ $(USER_LDFLAGS) \
		$(USER_LDINIT) $(X264_OBJS) $(USER_LDLIBS)
	$(V)$(OBJDUMP) -S $@ > $@.asm
	$(V)$(NM) -n $@ > $@.sym

# XXX horrible hack - don't check big datasets into the repository
$(OBJDIR)/user/eledream_640x360_8.y4m:
	cat ../parsec/pkgs/apps/x264/inputs/input_simsmall.tar | \
		(cd $(OBJDIR)/user; tar xf -)
