#
# Makefile fragment for the kernel.
# This is NOT a complete makefile;
# you must run GNU make in the top-level directory
# where the GNUmakefile is located.
#

OBJDIRS += kern

# entry.S must be first, so that it's the first code in the text segment!!!
#
# We also snatch the use of a few handy source files
# from the lib directory, to avoid gratuitous code duplication.
KERN_SRCFILES :=	kern/entry.S \
			kern/init.c \
			kern/console.c \
			kern/debug.c \
			kern/mem.c \
			kern/cpu.c \
			kern/trap.c \
			kern/trapasm.S \
			kern/mp.c \
			kern/spinlock.c \
			kern/proc.c \
			kern/syscall.c \
			kern/pmap.c \
			dev/video.c \
			dev/kbd.c \
			dev/serial.c \
			dev/pic.c \
			dev/nvram.c \
			dev/timer.c \
			dev/lapic.c \
			dev/ioapic.c \
			lib/printfmt.c \
			lib/cprintf.c \
			lib/readline.c \
			lib/string.c \
			lib/syscall.c

# Build files only if they exist.
KERN_SRCFILES := $(wildcard $(KERN_SRCFILES))

ifdef LAB7
# Binary program images to embed within the kernel.
KERN_BINFILES :=	user/icode \
			user/idle \
			user/pingpong \
			user/primes \
			user/testpteshare \
			user/testfdsharing \
			user/testpipe \
			user/testpiperace \
			user/testpiperace2 \
			user/primespipe \
			user/testkbd \
			user/testshell \
			fs/fs \
			net/testoutput \
			net/testinput \
			net/ns
else
ifdef LAB6
KERN_BINFILES :=	user/idle \
			user/pingpong \
			user/primes \
			user/writemotd \
			user/icode \
			user/testtime \
			user/httpd \
			user/echosrv \
			user/echotest \
			fs/fs \
			net/testoutput \
			net/testinput \
			net/ns
else
ifdef LAB5
# Binary program images to embed within the kernel.
KERN_BINFILES :=	user/idle \
			user/forktree \
			user/pingpong \
			user/primes \
			user/testfsipc \
			user/writemotd \
			user/icode \
			fs/fs
else
ifdef LAB4
# Binary program images to embed within the kernel.
KERN_BINFILES :=	user/idle \
			user/yield \
			user/dumbfork \
			user/faultread \
			user/faultwrite \
			user/faultdie \
			user/faultregs \
			user/faultalloc \
			user/faultallocbad \
			user/faultnostack \
			user/faultbadhandler \
			user/faultevilhandler \
			user/forktree \
			user/spin \
			user/fairness \
			user/pingpong \
			user/pingpongs \
			user/primes \
			user/hello
else
ifdef LAB3
KERN_BINFILES :=	boot/bootother \
			user/testvm
else
ifdef LAB2
KERN_BINFILES :=	boot/bootother
endif	# not LAB2
endif	# not LAB3
endif	# not LAB4
endif	# not LAB5
endif	# not LAB6
endif	# not LAB7

KERN_OBJFILES := $(patsubst %.c, $(OBJDIR)/%.o, $(KERN_SRCFILES))
KERN_OBJFILES := $(patsubst %.S, $(OBJDIR)/%.o, $(KERN_OBJFILES))

KERN_BINFILES := $(patsubst %, $(OBJDIR)/%, $(KERN_BINFILES))

# How to build kernel object files
$(OBJDIR)/kern/%.o: kern/%.c
	@echo + cc $<
	@mkdir -p $(@D)
	$(V)$(CC) -nostdinc $(KERN_CFLAGS) -c -o $@ $<

$(OBJDIR)/kern/%.o: kern/%.S
	@echo + as $<
	@mkdir -p $(@D)
	$(V)$(CC) -nostdinc $(KERN_CFLAGS) -c -o $@ $<

$(OBJDIR)/dev/%.o: dev/%.c
	@echo + cc $<
	@mkdir -p $(@D)
	$(V)$(CC) -nostdinc $(KERN_CFLAGS) -c -o $@ $<

# How to build the kernel itself
$(OBJDIR)/kern/kernel: $(KERN_OBJFILES) $(KERN_BINFILES)
	@echo + ld $@
	$(V)$(LD) -o $@ $(KERN_LDFLAGS) $(KERN_OBJFILES) $(GCC_LIB) -b binary $(KERN_BINFILES)
	$(V)$(OBJDUMP) -S $@ > $@.asm
	$(V)$(NM) -n $@ > $@.sym

# How to build the kernel disk image
$(OBJDIR)/kern/kernel.img: $(OBJDIR)/kern/kernel $(OBJDIR)/boot/bootblock
	@echo + mk $@
	$(V)dd if=/dev/zero of=$(OBJDIR)/kern/kernel.img~ count=10000 2>/dev/null
	$(V)dd if=$(OBJDIR)/boot/bootblock of=$(OBJDIR)/kern/kernel.img~ conv=notrunc 2>/dev/null
	$(V)dd if=$(OBJDIR)/kern/kernel of=$(OBJDIR)/kern/kernel.img~ seek=1 conv=notrunc 2>/dev/null
	$(V)mv $(OBJDIR)/kern/kernel.img~ $(OBJDIR)/kern/kernel.img

all: $(OBJDIR)/kern/kernel.img

grub: $(OBJDIR)/pios-grub

$(OBJDIR)/pios-grub: $(OBJDIR)/kern/kernel
	@echo + oc $@
	$(V)$(OBJCOPY) --adjust-vma=0x10000000 $^ $@

